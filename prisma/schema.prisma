generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model OtpToken {
  id        Int      @id @default(autoincrement())
  email     String
  phone     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email]) // Index pour rechercher rapidement par email
}

model Template_cv {
  id           Int      @id @default(autoincrement())
  image_apercue String
  options      String[]
}
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  phone         String    @unique
  password      String
  profil        String?
  role          String    @default("user") // Exemple de valeur par défaut
  status        String    @default("active") // Exemple de valeur par défaut
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshToken  String[]  // Tableau de chaînes, non nul, vide par défaut
  professions   Profession[]
  comments      ProfessionComment[]
  myCourse      Course[]
  interests     Interest[] @relation("UserInterests")
  userInterests UserInterest[]
  courses       UserCourse[]
}
model Profession {
  id            Int               @id @default(autoincrement())
  name          String
  userId        Int
  thumbnail     String?
  categoryId    Int
  category      ProfessionCategory @relation(fields: [categoryId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  videos        ProfessionVideo[]
  comments      ProfessionComment[] @relation("ProfessionComments")
  interests     Interest[]         @relation("ProfessionInterests")
  professionInterests ProfessionInterests[]
}

model ProfessionCategory {
  id    Int    @id @default(autoincrement())
  title String
  icon  String
  professions Profession[]
}

model ProfessionComment {
  id            Int               @id @default(autoincrement())
  senderId      Int
  professionVideoId Int
  professionId  Int
  profession    Profession        @relation("ProfessionComments", fields: [professionId], references: [id])
  content       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  parentId      Int?              // Optional for nested comments
  parent        ProfessionComment? @relation("ParentComments", fields: [parentId], references: [id])
  replies       ProfessionComment[] @relation("ParentComments")
  video         ProfessionVideo   @relation(fields: [professionVideoId], references: [id])
  sender        User              @relation(fields: [senderId], references: [id])
}

model ProfessionVideo {
  id          Int       @id @default(autoincrement())
  thumbnail   String    // URL of the video's thumbnail
  title   String?   // URL of the video's thumbnail
  professionId Int
  youtubeId   String    // YouTube video ID
  profession  Profession @relation(fields: [professionId], references: [id])
  comments    ProfessionComment[]
}
model Course {
  id          Int      @id @default(autoincrement())
  userId      Int       
  title       String
  description String?
  thumbnail   String?
  contenu     String   // Contenu du cours
  duration    Int      // Durée en heures
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  students    UserCourse[]
  interests     Interest[]         @relation("CourseInterests")
  courseInterests CourseInterests[]
}
model UserCourse {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  progress  Int      @default(0)
  status    String   @default("en cours")

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}
model Interest {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  users       User[]     @relation("UserInterests")
  professions Profession[] @relation("ProfessionInterests")
  courses     Course[]     @relation("CourseInterests")
  userInterests UserInterest[]
  professionInterests ProfessionInterests[]
  courseInterests CourseInterests[]
}
model UserInterest {
  userId     Int
  interestId Int
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([userId, interestId])
}
model ProfessionInterests {
  professionId     Int
  interestId Int
  profession       Profession     @relation(fields: [professionId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([professionId, interestId])
}

model CourseInterests {
  courseId     Int
  interestId Int
  course       Course     @relation(fields: [courseId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([courseId, interestId])
}
